name: Prepare release variables
on:
  workflow_call:
    inputs:
      releaseBranch:
        required: false
        type: string
        default: master,main
    outputs:
      organization:
        description: "Organization (eg. folder in docker registry)"
        value: ${{ jobs.variables.outputs.organization }}
      project:
        description: "Project name (eg. container name)"
        value: ${{ jobs.variables.outputs.project }}
      version:
        description: "Application release version"
        value: ${{ jobs.variables.outputs.version }}
      tag:
        description: "Application release tag (eg. Tag for docker container)"
        value: ${{ jobs.variables.outputs.tag }}

jobs:
  variables:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      organization: ${{ steps.repository.outputs.organization }}
      project: ${{ steps.repository.outputs.project }}
      version: ${{ steps.version.outputs.new_version }}
      tag: ${{ steps.version.outputs.new_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Get repository variables
        id: repository
        run: |
          setOutput() {
            echo "${1}=${2}" >> "$GITHUB_OUTPUT"
          }

          input="${{ github.repository }}"
          read -r var1 var2 <<< "$(sed -E 's|(.*)/(.*)|\1 \2|' <<< "$input")"

          setOutput organization ${var1,,}
          setOutput project ${var2,,}
      - name: Set version data for release
        id: version
        run: |
          setOutput() {
            echo "${1}=${2}" >> "$GITHUB_OUTPUT"
          }
          currentBranch=$(git rev-parse --abbrev-ref HEAD)
          releaseBranches=${{ inputs.releaseBranch}}
          IFS=',' read -ra branch <<< "$releaseBranches"
          for b in "${branch[@]}"; do
            # check if ${currentBranch} is in ${releaseBranches} | exact branch match
            if [[ "$currentBranch" == "$b" ]]; then
              preRelease="false"
            fi
            # verify non specific branch names like  .* release/* if wildcard filter then =~
            if [ "$b" != "${b//[\[\]|.? +*]/}" ] && [[ "$currentBranch" =~ $b ]]; then
              preRelease="false"
            fi
          done
          echo "preRelease = $preRelease"



          
          setOutput new_version $releaseBranches
          setOutput new_tag novy_tag