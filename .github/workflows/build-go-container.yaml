name: Build GO container
on:
  workflow_call:
    secrets:
      QUAY_USERNAME:
        required: false
      QUAY_TOKEN:
        required: false

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    uses: Cloud-for-You/github-workflows/.github/workflows/release-please.yaml@main

  build-dev-docker-image:
    runs-on: ubuntu-latest
    needs:
      - release
    if: github.ref != 'refs/heads/main'
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - darwin/amd64
          - darwin/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set cache name
        id: cache-name
        run: |
          echo "cache-name=${{ needs.release.outputs.project }}-cache-${{ matrix.platform }}" | sed 's:/:-:g' >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          tags: ${{ needs.release.outputs.project }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=local,dest=/tmp/${{ needs.release.outputs.project }}-cache,mode=max
      - name: Upload cache
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.cache-name.outputs.cache-name }}
          path: /tmp/${{ needs.release.outputs.project }}-cache
          if-no-files-found: error
          retention-days: 1
    
  build-release-docker-image:
    runs-on: ubuntu-latest
    needs:
      - release
    if: ${{ needs.release.outputs.release_created == 'true' }}
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - darwin/amd64
          - darwin/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set cache name
        id: cache-name
        run: |
          echo "cache-name=${{ needs.release.outputs.project }}-cache-${{ matrix.platform }}" | sed 's:/:-:g' >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          tags: ${{ needs.release.outputs.project }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=local,dest=/tmp/${{ needs.release.outputs.project }}-cache,mode=max
      - name: Upload cache
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.cache-name.outputs.cache-name }}
          path: /tmp/${{ needs.release.outputs.project }}-cache
          if-no-files-found: error
          retention-days: 1

  push:
    runs-on: ubuntu-latest
    needs:
      - release
      - build-release-docker-image
      - build-dev-docker-image
    if: ${{ always() && !failure() && !cancelled() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download cache
        uses: actions/download-artifact@v4
        with:
          path: /tmp/${{ needs.release.outputs.project }}-cache
      - name: Set docker tag
        id: set_tag
        run: |
          if [[ "${{ needs.build-release-docker-image.result }}" == "success" ]]; then
            echo "TAG=type=semver,pattern={{version}},value=${{ needs.release.outputs.release_tag_name }}" >> $GITHUB_ENV
          else
            echo "TAG=type=sha,enable=true,priority=100,prefix=sha-,suffix=,format=short" >> $GITHUB_ENV
          fi
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            quay.io/${{ needs.release.outputs.organization }}/${{ needs.release.outputs.project }}
          tags: |
            ${{ env.TAG }}
      - name: Login to QUAY.IO
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: |
            linux/amd64
            linux/arm64
            darwin/amd64
            darwin/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=gha,mode=max
      - name: Set tag expiration on Quay.io
        if: ${{ needs.build-dev-docker-image.result == 'success' }}
        run: |
          IMAGE="${{ steps.meta.outputs.tags }}"
          EXPIRATION="2d"
          USERNAME="${{ secrets.QUAY_USERNAME }}"
          PASSWORD="${{ secrets.QUAY_TOKEN }}"

          # Extrahování tagu z IMAGE (část za poslední dvojtečkou)
          TAG=$(echo "${IMAGE}" | awk -F: '{print $2}')
      
          # Vytvoření základní autentizace v base64
          AUTH=$(echo -n "${USERNAME}:${PASSWORD}" | base64)
      
          curl -X PATCH \
            -H "Authorization: Basic ${AUTH}" \
            -H "Content-Type: application/json" \
            -d '{
                  "expiration": "'"${EXPIRATION}"'"
                }' \
            "https://quay.io/api/v1/repository/${IMAGE}/tag/${TAG}/"

  #cleanup-branch:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - release
  #    - build-release-docker-image
  #    - build-dev-image
  #    - push
  #  if: ${{ always() && !failure() && !cancelled() }}
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v4
  #    - name: Get merged branch name
  #      id: get_merged_branch_name
  #      run: |
  #        echo "merged_branch=$(git for-each-ref --format '%(refname:short)' refs/remotes/origin/ --merged HEAD)" >> "$GITHUB_OUTPUT"
  #    - name: Delete merged branch
  #      run: |
  #        git fetch --prune --unshallow
  #        git push origin --delete ${{ steps.get_merged_branch_name.outputs.merged_branch }}
